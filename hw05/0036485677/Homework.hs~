module Homework where
--
import Data.List
--

-- Task 01

{-
  Inspect type signatures of functions that you are supposed to implement
  and and from that information try to think of how Robot and Bearing 
  data types should look like.
-}

data Robot = Robot Bearing (Integer, Integer)
  deriving (Show, Eq)
data Bearing = East | North | West | South
  deriving (Show, Eq)

mkRobot :: Bearing -> (Integer, Integer) -> Robot
mkRobot = Robot

bearing :: Robot -> Bearing
bearing (Robot bearing _) = bearing

coordinates :: Robot -> (Integer, Integer)
coordinates (Robot _ pos) = pos

processMove :: Robot -> Char -> Robot
processMove (Robot bearing' pos) 'R' = Robot (turnRight bearing') pos
processMove (Robot bearing' pos) 'L' = Robot (turnLeft bearing') pos
processMove (Robot bearing' pos) 'A' = Robot bearing' (advance bearing' pos)
processMove _ _                      = error "Unknown move!" -- just in case

{- It is MANDATORY to implement 'simulate' function in terms of fold -}
simulate :: Robot -> String -> Robot
simulate = foldl processMove

advance :: Bearing -> (Integer, Integer) -> (Integer, Integer)
advance East (x, y)  = (x + 1, y)
advance North (x, y) = (x, y + 1)
advance West (x, y)  = (x - 1, y)
advance South (x, y) = (x, y - 1)

turnLeft :: Bearing -> Bearing
turnLeft East  = North
turnLeft North = West
turnLeft West  = South
turnLeft South = East

turnRight :: Bearing -> Bearing
turnRight East  = South
turnRight North = East
turnRight West  = North
turnRight South = West

-- Task 02

data Triangle a = Triangle a a a
  deriving (Show, Eq)
data TriangleType = Equilateral | Isosceles | Scalene | Degenerate | Illegal
  deriving (Show, Eq)

isLegal :: (Ord a, Num a) => a -> a -> a -> Bool
isLegal a b c = a > 0 && b > 0 && c > 0
                && a + b >= c
                && a + c >= b
                && b + c >= a

-- all sides equal
isEquilateral :: (Eq a, Num a) => a -> a -> a -> Bool
isEquilateral a b c = a == b && b == c

-- at least two sides equal
isIsosceles :: (Eq a, Num a) => a -> a -> a -> Bool
isIsosceles a b c = a == b || a == c || b == c

-- all sides have different length
isScalene :: (Eq a, Num a) => a -> a -> a -> Bool
isScalene a b c = a /= b && a /= c && b /= c

-- sum of two sides is equal to third side
-- i.e. area is zero
isDegenerate :: (Eq a, Num a) => a -> a -> a -> Bool
isDegenerate a b c = a + b == c || a + c == b || b + c == a

triangleType :: (Ord a, Num a) => a -> a -> a -> TriangleType
triangleType a b c
  | not $ isLegal a b c = Illegal
  | isDegenerate a b c  = Degenerate
  | isEquilateral a b c = Equilateral
  | isIsosceles a b c   = Isosceles
  | isScalene a b c     = Scalene
  | otherwise           = Illegal

determineType :: (Ord a, Num a) => Triangle a -> TriangleType
determineType (Triangle a b c) = triangleType a b c

-- Task 03

{- some convenient test examples -}
-- splitter " > " " > " => ["", ""]
-- splitter " > " "123 > " => ["123", ""]
-- splitter " > " "123 > 456 > 789" => ["123", "456", "789"]

{-
  you don't have to bother with splitting on an empty list e.g.:
  splitter "" "abcde" => ["a", "b", "c", "d", "e"]
-}

{- It is MANDATORY to implement 'splitter' function in terms of fold -}
splitter :: Eq a => [a] -> [a] -> [[a]]
splitter = undefined

-- Task 04

{-
  For this task either write a solution to the problem or if you think
  solution doesn't exist explain why that is the case. Of corse, solution
  must use fold.
-}
